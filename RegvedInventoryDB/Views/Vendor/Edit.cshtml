@model RegvedInventoryDB.Models.VendorCategoryProductViewModel
@{
    ViewBag.Title = "Edit Vendor";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit Vendor</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul class="text-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

<form asp-action="Edit" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="VendorModel.VendorID" />
    <div class="form-group">
        <label asp-for="VendorModel.VendorName" class="control-label"></label>
        <input asp-for="VendorModel.VendorName" class="form-control" required aria-required="true" />
        <span asp-validation-for="VendorModel.VendorName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.Description" class="control-label"></label>
        <textarea asp-for="VendorModel.Description" class="form-control"></textarea>
        <span asp-validation-for="VendorModel.Description" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.VendorEmail" class="control-label"></label>
        <input asp-for="VendorModel.VendorEmail" class="form-control" type="email" required aria-required="true" />
        <span asp-validation-for="VendorModel.VendorEmail" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.Address" class="control-label"></label>
        <input asp-for="VendorModel.Address" class="form-control" required aria-required="true" />
        <span asp-validation-for="VendorModel.Address" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.PhoneNumber" class="control-label"></label>
        <input asp-for="VendorModel.PhoneNumber" class="form-control" type="tel" required aria-required="true" />
        <span asp-validation-for="VendorModel.PhoneNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="SelectedCategory" class="control-label">Category</label>
        <select asp-for="SelectedCategory" class="form-control" asp-items="@(new SelectList(Model.CategoryModel, "CategoryID", "CategoryName", Model.SelectedCategory))" required aria-required="true">
            <option value="">-- Select Category --</option>
        </select>
        <span asp-validation-for="SelectedCategory" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="SelectedProduct" class="control-label">Product</label>
        <select asp-for="SelectedProduct" class="form-control" asp-items="@(new SelectList(Model.ProductModel, "ProductID", "ProductName", Model.SelectedProduct))" required aria-required="true">
            <option value="">-- Select Product --</option>
        </select>
        <span asp-validation-for="SelectedProduct" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.Quantity" class="control-label"></label>
        <input asp-for="VendorModel.Quantity" class="form-control" type="number" min="1" required aria-required="true" />
        <span asp-validation-for="VendorModel.Quantity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.PricePerUnit" class="control-label"></label>
        <input asp-for="VendorModel.PricePerUnit" class="form-control" type="number" step="0.01" min="0.01" required aria-required="true" />
        <span asp-validation-for="VendorModel.PricePerUnit" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VendorModel.Amount" class="control-label"></label>
        <input asp-for="VendorModel.Amount" class="form-control" type="number" step="0.01" readonly />
        <span asp-validation-for="VendorModel.Amount" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var quantityInput = document.querySelector('input[name="VendorModel.Quantity"]');
            var priceInput = document.querySelector('input[name="VendorModel.PricePerUnit"]');
            var amountInput = document.querySelector('input[name="VendorModel.Amount"]');
            var form = document.querySelector('form');
            var categorySelect = document.querySelector('select[name="SelectedCategory"]');
            var productSelect = document.querySelector('select[name="SelectedProduct"]');

            function updateAmount() {
                var quantity = parseFloat(quantityInput.value) || 0;
                var price = parseFloat(priceInput.value) || 0;
                if (isNaN(quantity) || isNaN(price) || quantity < 1 || price < 0.01) {
                    amountInput.value = "0.00";
                } else {
                    amountInput.value = (quantity * price).toFixed(2);
                }
            }

            quantityInput.addEventListener('input', updateAmount);
            priceInput.addEventListener('input', updateAmount);

            form.addEventListener('submit', function (e) {
                console.log('Category:', categorySelect.value);
                console.log('Product:', productSelect.value);
                var hasCategoryError = !categorySelect.value || categorySelect.value === "";
                var hasProductError = !productSelect.value || productSelect.value === "";

                if (hasCategoryError || hasProductError) {
                    e.preventDefault();
                    if (hasCategoryError) {
                        categorySelect.nextElementSibling.textContent = "Please select a category.";
                    } else {
                        categorySelect.nextElementSibling.textContent = "";
                    }
                    if (hasProductError) {
                        productSelect.nextElementSibling.textContent = "Please select a product.";
                    } else {
                        productSelect.nextElementSibling.textContent = "";
                    }
                }
            });

            categorySelect.addEventListener('change', function () {
                if (categorySelect.value) {
                    categorySelect.nextElementSibling.textContent = "";
                }
            });
            productSelect.addEventListener('change', function () {
                if (productSelect.value) {
                    productSelect.nextElementSibling.textContent = "";
                }
            });
        });
    </script>
}